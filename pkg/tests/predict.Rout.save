
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## some awkward cases for predict
> ## (in response to bug reports from Arthur Spirling and Fonti Kar)
> 
> options(digits = 4) ## only applies to this file
> 
> ## The final model in example(flatlizards)
> library(BradleyTerry2)
Loading required package: lme4
Loading required package: Matrix
> data(flatlizards, package = "BradleyTerry2")
> attach(flatlizards)
> Whiting.model3 <- BTm(1, winner, loser, ~ throat.PC1[..] + throat.PC3[..] +
+                       head.length[..] + SVL[..] + (1|..),
+                       family = binomial(link = "probit"),
+                       data = list(contests, predictors), trace = TRUE)
Iteration 1. Score = 0.3606
Iteration 2. Score = 0.799
Iteration 3. Score = 0.2863
Iteration 4. Score = 0.003823
Iteration 5. Score = 0.0001769
Iteration 6. Score = 9.28e-06
Iteration 7. Score = 6.795e-07
> 
> 
> ## new lizard with original lizards with NAs
> newdata  <- list(contests = data.frame(winner = factor(c("lizard096", "lizard059"),
+                                        levels = c("lizard048", "lizard052", "lizard096", "lizard059")),
+                  loser = factor(c("lizard048", "lizard052"),
+                  levels = c("lizard048", "lizard052", "lizard096", "lizard059"))),
+                  predictors = rbind(flatlizards$predictors[c(27, 29, 55),-c(1,18) ],
+                  c(NA, 1.5, 1.5, -.2, 3, 1, -1, -1.5, -1.5, 250, 2000, 1, 0.1, 0.2, 0.5, -0.2)))
> 
> predict(Whiting.model3, level = 1, se.fit = TRUE, newdata = newdata)
$fit
[1] 19.63    NA

$se.fit
[1] 38745321       NA

> 
> ## new lizard with NAs - can't predict, go by na.action
> newdata  <- list(contests = data.frame(winner = factor(c("lizard048", "lizard059"),
+                                        levels = c("lizard006", "lizard011", "lizard048", "lizard059")),
+                  loser = factor(c("lizard006", "lizard011"),
+                  levels = c("lizard006", "lizard011", "lizard048", "lizard059"))),
+                  predictors = rbind(flatlizards$predictors[c(3, 6, 27),-c(1,18) ],
+                  c(NA, 1.5, 1.5, -.2, 3, 1, -1, -1.5, -1.5, 250, 2000, 1, 0.1, 0.2, 0.5, -0.2)))
> 
> predict(Whiting.model3, level = 0:1, se.fit = TRUE, newdata = newdata, na.action = na.pass)
$population
$population$fit
[1] 0.778    NA

$population$se.fit
[1] 0.3208     NA


$individual
$individual$fit
[1] 1.074    NA

$individual$se.fit
[1] 0.7846     NA


> 
> predict(Whiting.model3, level = 0:1, se.fit = TRUE, newdata = newdata, na.action = na.omit)
$population
$population$fit
[1] 0.778

$population$se.fit
[1] 0.3208


$individual
$individual$fit
[1] 1.074

$individual$se.fit
[1] 0.7846


> 
> ## newdata = original data
> tmp <- predict(Whiting.model3)
> tmp2 <- predict(Whiting.model3, newdata = list(contests, predictors))
> identical(tmp, tmp2)
[1] TRUE
> 
> ## new data with separate effects as in original
> 
> newdata  <- list(contests = data.frame(winner = factor(c("lizard096", "lizard099"),
+                                        levels = c("lizard048", "lizard052", "lizard096", "lizard099")),
+                  loser = factor(c("lizard048", "lizard052"),
+                  levels = c("lizard048", "lizard052", "lizard096", "lizard099"))),
+                  predictors = flatlizards$predictors[c(27, 29, 55, 56),-c(1,18) ])
> 
> predict(Whiting.model3, level = 1, se.fit = TRUE, newdata = newdata)#[31, 34]
$fit
[1] 19.6348  0.6275

$se.fit
[1] 3.875e+07 7.994e-01

> 
> predict(Whiting.model3, level = 1, se.fit = TRUE)$fit[c(31, 34)]
[1] 19.6348  0.6275
> predict(Whiting.model3, level = 1, se.fit = TRUE)$se.fit[c(31, 34)]
[1] 3.875e+07 7.994e-01
> 
> ## model in which some parameters are inestimable, e.g. contest-level predictor
> ## that is same for both players (interactions may be of interest in practice)
> 
> detach(flatlizards)
> set.seed(1)
> data(flatlizards)
> flatlizards$contests$rainy <- sample(c(0, 1), nrow(flatlizards$contests), 
+                                      replace = TRUE)
> attach(flatlizards)
> example.model <-  BTm(1, winner, loser, ~ rainy + throat.PC1[..] + throat.PC3[..] +
+                           head.length[..] + SVL[..] + (1|..),
+                       family = binomial(link = "probit"),
+                       data = list(contests, predictors), trace = TRUE)
Iteration 1. Score = 0.3606
Iteration 2. Score = 0.799
Iteration 3. Score = 0.2863
Iteration 4. Score = 0.003823
Iteration 5. Score = 0.0001769
Iteration 6. Score = 9.28e-06
Iteration 7. Score = 6.795e-07
> example.model
Bradley Terry model fit by glmmPQL.fit 

Call: BTm(outcome = 1, player1 = winner, player2 = loser, formula = ~rainy + 
    throat.PC1[..] + throat.PC3[..] + head.length[..] + SVL[..] + 
    (1 | ..), family = binomial(link = "probit"), data = list(contests, 
    predictors), trace = TRUE)

Fixed effects:

    ..lizard096      ..lizard099            rainy   throat.PC1[..]  
        20.4640           0.5977               NA          -0.0536  
 throat.PC3[..]  head.length[..]          SVL[..]  
         0.2276          -0.8434           0.1054  

Random Effects Std. Dev.: 0.6296 
> 
> 
> head(predict(example.model, level = 0))
[1]  0.7780  0.5561  1.4796  2.6627  1.7430 -0.6647
> head(predict(example.model, level = 1))
[1]  1.0742  0.8355  2.1851  2.7080  1.9867 -0.4569
> lapply(predict(example.model, level = 0, se.fit = TRUE), head)
$fit
[1]  0.7780  0.5561  1.4796  2.6627  1.7430 -0.6647

$se.fit
[1] 0.3208 0.3365 0.5447 0.8421 0.6608 0.2193

> lapply(predict(example.model, level = 1, se.fit = TRUE), head)
$fit
[1]  1.0742  0.8355  2.1851  2.7080  1.9867 -0.4569

$se.fit
[1] 0.7846 0.7931 0.9306 1.1621 0.9525 0.6889

> # predict for unknown lizards - at level 0 only
> newdata  <- list(contests = data.frame(
+     rainy = c(0, 1),
+     winner = factor(c("lizard100", "lizard101"),
+                     levels = c("lizard100", "lizard101", "lizard102", "lizard103")),
+     loser = factor(c("lizard103", "lizard102"),
+                    levels = c("lizard100", "lizard101", "lizard102", "lizard103"))),
+     predictors = as.data.frame(lapply(predictors, sample, 4)))
> lapply(predict(example.model, level = 0, newdata = newdata, type = "response", 
+                se.fit = TRUE), head)
$fit
[1] 0.7239 0.9289

$se.fit
[1] 0.2748 0.1207

> # predict at level 1 for unknown lizards is NA
> predict(example.model, level = 1, newdata = newdata, type = "response", se.fit = TRUE)
$fit
[1] NA NA

$se.fit
[1] NA NA

> # predict at level 1 for known lizards
> newdata$contests$winner <- factor(paste0("lizard0", c(10, 13)),
+                                  levels = paste0("lizard0", 10:13))
> newdata$contests$loser <- factor(c("lizard012", "lizard011"),
+                                  levels = paste0("lizard0", 10:13))
> newdata$predictors <- predictors[5:8,]
> predict(example.model, level = 1, newdata = newdata, type = "response", se.fit = TRUE)
$fit
[1] 0.9966 0.5961

$se.fit
[1] 0.2696 0.3219

> 
> proc.time()
   user  system elapsed 
  1.880   0.040   1.928 
